name: ci-cd

on: [push, pull_request]

jobs:
  tests:
    name: Lint and run tests
    runs-on: ubuntu-latest
    steps:
    - 
      uses: actions/checkout@v1
    - 
      name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - 
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.dev.txt
    - 
      name: Lint with flake8
      # stop the build if there are Python syntax errors or undefined names
      # see https://flake8.pycqa.org/en/latest/user/error-codes.html 
      # I recommend using `$ autopep8 --in-place --recursive .` or installing 
      # an extension for the IDE to speed up the process of linting.
      run: |
        pip install flake8
        flake8 . --show-source --statistics
    - 
      name: Run tests
      run: |
        python -m pytest
  deploy:
    name: Build and push image
    needs: tests
    # Only run if pushed to master and if tests have passed.
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - 
        name: Check Out Repo 
        uses: actions/checkout@v2
      - 
        name: Login to Github Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          # Github Container Registry, Personal Access Token.
          # Currently in the GHCR beta, a PAT is the only way to access GHCR through actions. 
          password: ${{ secrets.GHCR_PAT }}
      - 
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: |
            ${{ github.repository }}:latest
            ${{ github.repository }}:${{ github.sha }}
      - 
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}